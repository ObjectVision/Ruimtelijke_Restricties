container Enkelbestemming
{
	// "id";"Planstatus"
	// 2699;'concept'
	// 83384;'geconsolideerd'
	// 8427;'geconsolideerde versie'
	// 5392;'goedgekeurd'
	// 268;'goedgekeurd; geheel goedgekeurd'
	// 1322;'goedgekeurd; goedgekeurd met uitzondering van onthoudingen'
	// 242560;'onherroepelijk'
	// 349131;'ontwerp'
	// 1047;'uitspraak afdeling bestuursrechtspraak'
	// 1123;'uitspraak afdeling bestuursrechtspraak; alsnog goedgekeurd'
	// 1865771;'vastgesteld'
	// 14592;'vigerend'
	// 72165;'voorontwerp'

	//https://geoforum.nl/t/hoe-bepalen-wat-de-vigerende-enkelbestemming-is/3065/2
	parameter<string> Bestandsloc: = '%RestrictiesDataDir%/Beleid/Ruimte/BP_2024/Enkelbestemming.gpkg';
	
	//https://omgevingswet.overheid.nl/regels-op-de-kaart/viewer/(documenten/gemeente//rechter-paneel:document/NL.IMRO.0312.Kersenweide-ON01/plekinfo)?regelsandere=regels&locatie-stelsel=RD&locatie-x=143444&locatie-y=451670&geodocId=NL-IMRO-0312-Kersenweide-ON01-1&session=6e8ab7ee-69ee-4a49-a182-4087928da585
	//https://omgevingswet.overheid.nl/regels-op-de-kaart/viewer/(documenten/gemeente//rechter-paneel:document/NL.IMRO.0312.bpBNKvinkenburg-va01/plekinfo)?regelsandere=regels&locatie-stelsel=RD&locatie-x=143444&locatie-y=451670&geodocId=NL-IMRO-0312-bpBNKvinkenburg-va01-2&session=6e8ab7ee-69ee-4a49-a182-4087928da585
	unit<uint32> Data
	: StorageName     = "%RestrictiesDataDir%/Beleid/Ruimte/BP_2024/Enkelbestemming.gpkg"
	, StorageType     = "gdal.vect"
	, DialogType      = "Map"
	, StorageReadOnly = "True"
	//, SqlString       = "SELECT * FROM Enkelbestemming WHERE plangebied='NL.IMRO.0312.bpBNKvinkenburg-va01' OR plangebied='NL.IMRO.0312.Kersenweide-ON01'"//Gemeente Bunnik overlap vinkenburg eerst
	//, SqlString       = "SELECT * FROM Enkelbestemming WHERE plangebied='NL.IMRO.0312.bpBNKvinkenburg-va01' OR plangebied='NL.IMRO.0312.Kersenweide-ON01' ORDER BY planstatus DESC"//DESC vinkenburg eerst, ascending Kersenweide eerst
	//, SqlString       = "SELECT * FROM Enkelbestemming WHERE plangebied='NL.IMRO.0344.BPRIJNENBURGUTRECH-VA01'"//DESC vinkenburg eerst, ascending Kersenweide eerst
	
	
	{
		attribute<rdc_meter>  Geometry (poly);
		//attribute<string> naamA := sort_str(naam);
	}
	
	
	// unit<uint32> NL_IMRO_0344_BPRIJNENBURGUTRECH_VA01
	// : StorageName     = "%RestrictiesDataDir%/Beleid/Ruimte/BP_2024/NL_IMRO_0344_BPRIJNENBURGUTRECH_VA01.gpkg"
	// , StorageType     = "gdal.vect"
	// , DialogType      = "Map"
	// , DialogData      = "Geometry"
	// , StorageReadOnly = "True"
	//, SqlString       = "SELECT * FROM ExportTable WHERE bestemmingshoofdgroep='agrarisch'"
	// , SqlString       = "SELECT * FROM ExportTable WHERE gml_id='EB_7060554' OR gml_id='EB_7060457'"
		
	// {
		// attribute<rdc_meter>  Geometry (poly);
		// attribute<string>     label := gml_id;
		
	// }



	unit<uint32>planstatuslaag
	{
		container Import := for_each_nxs(EnkelbestemmingRead/planstatus/name_underscore, uint32, EnkelbestemmingRead/planstatus/SqlString)
		,	StorageName     = "%RestrictiesDataDir%/Beleid/Ruimte/BP_2024/Enkelbestemming.gpkg"
		,	DialogType      = "Map"
		,	DialogData      = "geometry_rd"
		,	StorageReadOnly = "True"
		,	SyncMode        = "Attr"
		,	StorageType     = "gdal.vect"
		,	SqlString       = "=EnkelbestemmingRead/planstatus/SqlString"
		{
			//werkt niet zie mantis-issue https://www.geodms.nl/mantis/view.php?id=243 --> sqlstring doorgeven van unit op attribuut lijkt niet goed te werken.
			container lagen   := castToValuesUnit(geconsolideerd);
	
			unit<uint32> concept :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'concept'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> geconsolideerd :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'geconsolideerd'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> geconsolideerde_versie :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'geconsolideerde versie'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> goedgekeurd :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'goedgekeurd'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> goedgekeurd__geheel_goedgekeurd :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'goedgekeurd; geheel goedgekeurd'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> goedgekeurd__goedgekeurd_met_uitzondering_van_onthoudingen :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'goedgekeurd; goedgekeurd met uitzondering van onthoudingen'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> onherroepelijk :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'onherroepelijk'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> ontwerp :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'ontwerp'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> uitspraak_afdeling_bestuursrechtspraak :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'uitspraak afdeling bestuursrechtspraak'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> uitspraak_afdeling_bestuursrechtspraak__alsnog_goedgekeurd  :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'uitspraak afdeling bestuursrechtspraak; alsnog goedgekeurd'"
						{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> vastgesteld :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'vastgesteld'"
						{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> vigerend :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'vigerend'"
						{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> voorontwerp :sqlstring="SELECT * FROM Enkelbestemming WHERE planstatus = 'voorontwerp'"
						{
				attribute<rdc_meter> geometry(poly);
			}
		}
	}
	
	unit<uint32>bestemminglaag
	{
		container Import := for_each_nxs(EnkelbestemmingRead/bestemming/name_underscore, uint32, EnkelbestemmingRead/bestemming/SqlString)
		,	StorageName     = "%RestrictiesDataDir%/Beleid/Ruimte/BP_2024/Enkelbestemming.gpkg"
		,	DialogType      = "Map"
		,	DialogData      = "geometry_rd"
		,	StorageReadOnly = "True"
		,	SyncMode        = "Attr"
		,	StorageType     = "gdal.vect"
		,	SqlString       = "=EnkelbestemmingRead/bestemming/SqlString"
		{
			//container lagen   := castToValuesUnit(wonen);
	
			unit<uint32> agrarisch :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'agrarisch'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> agrarisch_met_waarden :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'agrarisch met waarden'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> bedrijf :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'bedrijf'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> bedrijventerrein :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'bedrijventerrein'"
			{
				attribute<rdc_meter> geometry(poly);
	
				container bedrijventerrein_grid : = VergriddingT
				(
					'=Bestandsloc'
					,'SELECT * FROM Enkelbestemming WHERE bestemming =''bedrijventerrein'''
					,''
					,''
				);
			}
	
			attribute<BedrijventerreinKlasse> bedrijventerrein_grid_color (/Geography/rdc_25m):=bedrijventerrein/bedrijventerrein_grid/Multi/Result[uint8];
	
	
			unit<uint8> BedrijventerreinKlasse: nrofrows = 2
			{
				attribute<uint8> ClassBreak: DialogType = "Classification",
				[
					0,1
				];
			
				attribute<uint32> BrushColor: DialogType = "BrushColor",
				[
					rgb(255,255,255),rgb(200,160,215)
				];
		
				attribute<String> Label: DialogType = "LabelText",
				[
					'niet-bedrijventerrein','bedrijventerrein'
				];
			}
			
			unit<uint32> bos :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'bos'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> centrum :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'centrum'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> cultuur_en_ontspanning :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'cultuur en ontspanning'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> detailhandel :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'detailhandel'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> dienstverlening :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'dienstverlening'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> gemengd :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'gemengd'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> groen :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'groen'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> horeca :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'horeca'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> kantoor :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'kantoor'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> maatschappelijk :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'maatschappelijk'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> natuur :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'natuur'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> overig :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'overig'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> recreatie :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'recreatie'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> sport :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'sport'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> tuin :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'tuin'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> verkeer :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'verkeer'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> water :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'water'"
			{
				attribute<rdc_meter> geometry(poly);
			}
			unit<uint32> wonen :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'wonen'"
			{
				attribute<rdc_meter> geometry(poly);
	
				container wonen_grid : = VergriddingT
				(
					'=Bestandsloc'
					,'SELECT * FROM Enkelbestemming WHERE bestemming =''wonen'''
					,''
					,''
				);
			}
			
			attribute<WonenKlasse> wonen_grid_color (/Geography/rdc_25m):=wonen/wonen_grid/Multi/Result[uint8];
	
	
			unit<uint8> WonenKlasse: nrofrows = 2
			{
				attribute<uint8> ClassBreak: DialogType = "Classification",
				[
					0,1
				];
			
				attribute<uint32> BrushColor: DialogType = "BrushColor",
				[
					rgb(255,255,255),rgb(255,0,0)
				];
		
				attribute<String> Label: DialogType = "LabelText",
				[
					'niet-wonen','wonen'
				];
			}
	
			unit<uint32> woongebied :sqlstring="SELECT * FROM Enkelbestemming WHERE bestemming = 'woongebied'"
			{
				attribute<rdc_meter> geometry(poly);
				
	
			}
		}
	}


	template castToValuesUnit
	{
		// begin case parameters
		unit<uint32> org_domain; // de verwijzing is nodig omdat anders de properties DialogType en DialogData wegvallen
		// end case parameters
		
		unit<uint32> domain: = org_domain
		,	DialogType = "map"
		,	DialogData = "geometry_rd"
		{
			attribute<dpoint> geometry:=org_domain/geometry;
		}
		
		attribute<rdc_meter> geometry_rd (poly, domain):= domain/geometry[rdc_meter];
	}
}