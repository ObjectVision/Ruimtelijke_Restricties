container EnkelbestemmingRead
{
	//test overlap
	// unit<uint32> ReadFSS_Kersenweide := select_with_attr_by_cond(ReadFSS, ReadFSS/plangebied="NL.IMRO.0312.Kersenweide-ON01")
	// {
		// attribute<ReadFSS_Kersenweide>          Grid (domain)                := poly2grid(ReadFSS_Kersenweide/Geometry , domain);
		// attribute<bestemmingKlasse> Enkelbestemming_grid(domain) := ReadFSS_Kersenweide/bestemming_Rel[uint32][Grid][bestemmingKlasse];
	// }

	// unit<uint32> ReadFSS_vinkenburg := select_with_attr_by_cond(ReadFSS, ReadFSS/plangebied="NL.IMRO.0312.bpBNKvinkenburg-va01")
	// {
		// attribute<ReadFSS_vinkenburg>          Grid (domain)                := poly2grid(ReadFSS_vinkenburg/Geometry , domain);
		// attribute<bestemmingKlasse> Enkelbestemming_grid(domain) := ReadFSS_vinkenburg/bestemming_Rel[uint32][Grid][bestemmingKlasse];
	// }


	// unit<uint32> ReadFSS_test := select_with_attr_by_cond(ReadFSS, ReadFSS/plangebied="NL.IMRO.0312.bpBNKvinkenburg-va01" || ReadFSS/plangebied="NL.IMRO.0312.Kersenweide-ON01")
	// {
		// attribute<ReadFSS_test>          Grid (domain)                := poly2grid(ReadFSS_test/Geometry , domain);
		// attribute<bestemmingKlasse> Enkelbestemming_grid(domain) := ReadFSS_test/bestemming_Rel[uint32][Grid][bestemmingKlasse];
	// }

	unit<uint32> ReadFSS_org
	: 	StorageName = "%RestrictiesDataDir%/Beleid/Ruimte/BP_2024/Enkelbestemming.fss"
	,   Source          = "item /SourceData/Beleid/OmgRecht/BP/EnkelbestemmingMake/MakeFSS"  
	,   StorageReadOnly = "True"
	,  SyncMode         = "Attr"
	{
		attribute<rdc_meter> Geometry (poly);
		attribute<string> gml_id;
		attribute<int32>  fid;
		attribute<string> bestemmingshoofdgroep;
		attribute<int32>  historisch;
		attribute<string> identificatie;
		attribute<string> naam;
		attribute<string> plangebied;
		attribute<string> planstatus;
		attribute<string> typePlan;
		attribute<string> versieIMRO;
		attribute<string> verwijzingNaarTekst;
		attribute<string> dossierID;
		attribute<string> dossierStatus;
		attribute<string> Datum;
	}
	
	
	unit<uint32> ReadFSS := select_with_attr_by_cond(ReadFSS_org, ReadFSS_org/planstatus="concept" || ReadFSS_org/planstatus="ontwerp" || ReadFSS_org/planstatus="voorontwerp")	
	{
		attribute<string> plangebied_gemcode := substr(plangebied, 8, 4);
		attribute<string> GemeenteNaam2021   := rjoin(plangebied_gemcode,BP/Gemeente2021/Gemeentecode,BP/Gemeente2021/Gemeentenaam);
		attribute<string> GemeenteCodeGM2021 := rjoin(plangebied_gemcode,BP/Gemeente2021/Gemeentecode,BP/Gemeente2021/GemeentecodeGM);
		attribute<string> ProvincieNaam2021  := rjoin(plangebied_gemcode,BP/Gemeente2021/Gemeentecode,BP/Gemeente2021/ProvincieNaam);
		attribute<string> ProvincieCode2021  := rjoin(plangebied_gemcode,BP/Gemeente2021/Gemeentecode,BP/Gemeente2021/ProvinciecodePV);
	
		attribute<naamunique>       naam_Rel       := rlookup(naam, naamunique/values);
		attribute<bestemmingunique> bestemming_Rel := rlookup(bestemmingshoofdgroep, bestemmingunique/values);
		attribute<planstatusunique> planstatus_Rel := rlookup(planstatus, planstatusunique/values);
	
		attribute<meter2> oppm2                  := area(Geometry, meter2);
		attribute<ha>     oppha                  := oppm2[ha];
	
		attribute<bestemmingKlasse/AggrWonen>           AggrWonen_Rel           := rjoin(bestemmingshoofdgroep, bestemmingKlasse/name,bestemmingKlasse/IsWonen_rel);
		attribute<bestemmingKlasse/AggrVerstedelijking> AggrVerstedelijking_Rel := rjoin(bestemmingshoofdgroep, bestemmingKlasse/name,bestemmingKlasse/IsVerstedelijking_rel);
		attribute<bestemmingKlasse/AggrGroenRood>       AggrGroenRood_Rel       := rjoin(bestemmingshoofdgroep, bestemmingKlasse/name,bestemmingKlasse/AggrGroenRood_rel);
		attribute<bestemmingKlasse/AggrWerken>          AggrWerken_Rel          := rjoin(bestemmingshoofdgroep, bestemmingKlasse/name,bestemmingKlasse/IsWerken_rel);
	
	}


		attribute<ReadFSS>          Grid (domain)                := poly2grid(ReadFSS/Geometry , domain);//vergridding bij overlap geometry laatste record wat ruimtelijk in een zelfde cel ligt leidend
		
		attribute<bestemmingKlasse> Enkelbestemming_grid(domain) := ReadFSS/bestemming_Rel[uint32][Grid][bestemmingKlasse];
		attribute<planstatusKlasse> planstatus_grid(domain)      := ReadFSS/planstatus_Rel[uint32][Grid][planstatusKlasse];
		
		attribute<bestemmingKlasse/AggrWonen>           AggrWonen_grid             (domain)      := ReadFSS/AggrWonen_Rel[uint32][Grid][bestemmingKlasse/AggrWonen];
		attribute<bestemmingKlasse/AggrVerstedelijking> AggrVerstedelijking_grid   (domain)      := ReadFSS/AggrVerstedelijking_Rel[uint32][Grid][bestemmingKlasse/AggrVerstedelijking];
		attribute<bestemmingKlasse/AggrGroenRood>       AggrGroenRood_grid         (domain)      := ReadFSS/AggrGroenRood_Rel[uint32][Grid][bestemmingKlasse/AggrGroenRood];
		attribute<bestemmingKlasse/AggrWerken>          AggrWerken_grid            (domain)      := ReadFSS/AggrWerken_Rel[uint32][Grid][bestemmingKlasse/AggrWerken];


		attribute<uint32> CBS_AggrVerstedelijking_grid(domain)      := Classifications/LandUsePreparation/CBSKlasse/Aggr4_rel[uint32][SourceData/Grondgebruik/BBG/Dominant/Per_rdc_25m/J2015];
		attribute<uint32> CBS_AggrVerstedelijking_grid_NULL(domain) := IsDefined(AggrVerstedelijking_grid) ? CBS_AggrVerstedelijking_grid : 0/0;
		
		attribute<uint32> CBS_AggrWerken_grid(domain)           := Classifications/LandUsePreparation/CBSKlasse/Aggr5_rel[uint32][SourceData/Grondgebruik/BBG/Dominant/Per_rdc_25m/J2015];
		attribute<uint32> CBS_AggrWerken_grid_NULL(domain)      := IsDefined(AggrWerken_grid) ? CBS_AggrWerken_grid : 0/0;
		attribute<uint32> CBS_AggrTransWerken_grid_NULL(domain) := AggrWonen_grid=1b ? CBS_AggrWerken_grid : 0/0;


		#include <ReadFSSsubsetC.dms>//om subsets te checken aangaande overlap invloed planstatus sel

		parameter<ha> totoppha := sum(ReadFSS/oppha);

		unit<uint32> naamunique := unique(ReadFSS/naam)
		{
			attribute<uint32>  aantal  := pcount(ReadFSS/naam_Rel);
			attribute<float32> oppha   := sum(ReadFSS/oppha,ReadFSS/naam_Rel);
			attribute<float32> aandeel := (oppha / totoppha) * 100f;
		}

		unit<uint32> bestemmingunique := unique(ReadFSS/bestemmingshoofdgroep)
		{
			attribute<uint32>   id      :=id(.);
			attribute<uint32>  aantal  := pcount(ReadFSS/bestemming_Rel);
			attribute<float32> oppha   := sum(ReadFSS/oppha,ReadFSS/bestemming_Rel);
			attribute<float32> aandeel := (oppha / totoppha) * 100f;
		}

	
		//zie ook https://www.infomil.nl/onderwerpen/ruimte/ruimtelijke/wet-ruimtelijke/bestemmingsplan/uitleg/
		
		unit<uint32> planstatusunique:= unique(ReadFSS_org/planstatus)//-->13
		{
			attribute<uint32>  aantal       := pcount(ReadFSS/planstatus_Rel);
			attribute<float32> oppha        := sum(ReadFSS/oppha,ReadFSS/planstatus_Rel);
			attribute<float32> aandeel      := (oppha / totoppha) * 100f;
		}
		
	#include <BP_vs_CBS.dms>
}