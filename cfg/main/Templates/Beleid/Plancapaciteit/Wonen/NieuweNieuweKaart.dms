container NieuweNieuweKaart
{
	unit<uint32> PlanStatusK := unique(NieuweNieuweKaartWonen/PlanStatus)
	{
		attribute<string> name_long := 'S'+replace(values, '/', '_', '-', '_', ' ', '_', '+', '');
		attribute<string> name      := id(.) == last(id(.)) ? 'ONB' : left(name_long, 3);
		attribute<string> Label     := name, DialogType = "LabelText";
		attribute<bool>   Hard    : [true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false];
	}
	
	unit<uint32> Read_NieuweNieuweKaartWonen_gdb
	: StorageName     = "%RestrictiesDataDir%/Beleid/Ruimte/NieuweNieuweKaart/NieuweKaart_wonen_aug2020.gdb"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	, Source          = "download website https://nieuwekaartnl.nl/_download/ november 2020. conversie van shp naar gdb in ArcGIS"
	, url             = "https://nieuwekaartnl.nl/_download/"
	{
		attribute<rdc_meter> Geometry (poly);
	}
	
	unit<uint32> Make_NieuweNieuweKaartWonen := Read_NieuweNieuweKaartWonen_gdb
	, StorageName     = "%LocalDataProjDir%/Basedata/Beleid/Ruimte/NieuweNieuweKaart/NieuweKaart_wonen_aug2020.fss"
	{
		attribute<rdc_meter> Geometry (poly) := Read_NieuweNieuweKaartWonen_gdb/Geometry;
		attribute<string>    PlanStatus      := Read_NieuweNieuweKaartWonen_gdb/PlanStatus;
		attribute<string>    Plantype        := Read_NieuweNieuweKaartWonen_gdb/Plantype;
		attribute<float64>   Shape_Area      := Read_NieuweNieuweKaartWonen_gdb/Shape_Area;
		attribute<float64>   Shape_Length    := Read_NieuweNieuweKaartWonen_gdb/Shape_Length;
		attribute<int32>     Op20302050      := Read_NieuweNieuweKaartWonen_gdb/Op20302050;
		attribute<int32>     OPLONB          := Read_NieuweNieuweKaartWonen_gdb/OPLONB;
		attribute<int32>     OP2019          := Read_NieuweNieuweKaartWonen_gdb/OP2019;
		attribute<int32>     OP202024        := Read_NieuweNieuweKaartWonen_gdb/OP202024;
		attribute<int32>     Op202529        := Read_NieuweNieuweKaartWonen_gdb/Op202529;
		attribute<int32>     AantalRest      := Read_NieuweNieuweKaartWonen_gdb/AantalRest;
		attribute<int32>     WTYPGGB         := Read_NieuweNieuweKaartWonen_gdb/WTYPGGB;
		attribute<int32>     WTYPAPP         := Read_NieuweNieuweKaartWonen_gdb/WTYPAPP;
		attribute<int32>     WTYPONB         := Read_NieuweNieuweKaartWonen_gdb/WTYPONB;
	}
	
	unit<uint32> NieuweNieuweKaartWonen
	: StorageName     = "%LocalDataProjDir%/Basedata/Beleid/Ruimte/NieuweNieuweKaart/NieuweKaart_wonen_aug2020.fss"
	, StorageReadOnly = "True"
	{
		attribute<rdc_meter> Geometry (poly);
		attribute<string>    PlanStatus;
		// attribute<string>    Plantype;
		attribute<float64>   Shape_Area;
		attribute<float64>   Shape_Length;
		// attribute<int32>     Op20302050;
		// attribute<int32>     OPLONB;
		// attribute<int32>     OP2019;
		// attribute<int32>     OP202024;
		// attribute<int32>     Op202529;
		// attribute<int32>     AantalRest;
		// attribute<int32>     WTYPGGB;
		// attribute<int32>     WTYPAPP;
		// attribute<int32>     WTYPONB;
		
		attribute<bool>        Hard                  := PlanStatusK/Hard[PlanStatus_Rel];
		attribute<float64>     OperimetrischQuotient := (4d * pi() * Shape_Area) / (Shape_Length * Shape_Length); //\https://nl.wikipedia.org/wiki/Isoperimetrisch_quoti%C3%ABnt
		attribute<bool>        IsSymbool             := OperimetrischQuotient > 0.98;
		attribute<PlanStatusK> PlanStatus_Rel        := rlookup(PlanStatus, PlanStatusK/values);
		attribute<bool> IsAlGerealiseerd             := id(.) == 225[.] || id(.) == 226[.] || id(.) == 227[.] || id(.) == 228[.];
		// attribute<PlanTypeK>   PlanType_Rel          := PlanTypeK0/PlanTypeK_rel[rlookup(PlanType2, PlanTypeK0/values)];
		// attribute<Gemeente>    Gemeente_rel          := point_in_polygon(centroid_or_mid(Geometry), gemeente/Geometry);
		// attribute<float32>     FractieOplNa2030      := float32(add(Op20302050, OPLONB)) / float32(add(OP2019, OP202024, Op202529, Op20302050, OPLONB));
		// attribute<string>      PlanType2             := replace(Plantype, '?', 'Onbekend');
		// attribute<int32>       Aantal_netto_bij      := AantalRest;
		// attribute<float32>     AandeelEengezins      := AantalRest > 0[int32] ? min_elem(float32(WTYPGGB) / float32(add(WTYPGGB, WTYPAPP, WTYPONB)), 1f) : 0f/0f;
		// attribute<float32>     AandeelMeergezins     := AantalRest > 0[int32] ? min_elem(float32(WTYPAPP) / float32(add(WTYPGGB, WTYPAPP, WTYPONB)), 1f) : 0f/0f;
		// attribute<float32>     AandeelOnbekend       := AantalRest > 0[int32] ? min_elem(float32(WTYPONB) / float32(add(WTYPGGB, WTYPAPP, WTYPONB)), 1f) : 0f/0f;
	}
	
	unit<uint32> Fijn := subset(!NieuweNieuweKaartWonen/IsSymbool && !NieuweNieuweKaartWonen/IsAlGerealiseerd), StorageReadOnly = "True"
	{
		attribute<rdc_meter> Geometry (polygon) := NieuweNieuweKaartWonen/Geometry[Nr_OrgEntity];
		attribute<bool>      Hard               := NieuweNieuweKaartWonen/Hard[Nr_OrgEntity];
		attribute<bool>      Zacht              := !Hard;
		attribute<bool>      IsPampus           := id(.) == 482[.]
		{
			attribute<bool> Per_AllocDomain (/AllocDomain) := IsPampus[poly2grid(Geometry, /AllocDomain)];
		}
		
		// attribute<float32>   FractieOplNa2030   := NieuweNieuweKaartWonen/FractieOplNa2030[Nr_OrgEntity];
		// attribute<int32>     Aantal_netto_bij   := NieuweNieuweKaartWonen/Aantal_netto_bij[Nr_OrgEntity];
		// attribute<float32>   AandeelEengezins   := NieuweNieuweKaartWonen/AandeelEengezins[Nr_OrgEntity];
		// attribute<float32>   AandeelMeergezins  := NieuweNieuweKaartWonen/AandeelMeergezins[Nr_OrgEntity];
		// attribute<float32>   AandeelOnbekend    := NieuweNieuweKaartWonen/AandeelOnbekend[Nr_OrgEntity];
		// attribute<PlanTypeK> PlanType_Rel       := NieuweNieuweKaartWonen/PlanType_Rel[Nr_OrgEntity];
	}
}